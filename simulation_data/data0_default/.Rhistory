compare_pairs <- function(pair1, pair2, type) {
par(mfrow=c(2, 1), mai=c(0.4,0.4,0.4,0.4))
plot_pair(pair1[[1]], pair1[[2]], type)
title(type)
plot_pair(pair2[[1]], pair2[[2]], type)
}
# plot_mc_pair(c(0, 1), c(4, 1))
# compare_mc_pairs(list(c(0, 1), c(4, 1)), list(c(3, 4), c(2, 4)))
compare_pairs(
list(c(0, 1), c(4, 1)),
list(c(3, 4), c(2, 4)),
type="MC"
)
compare_pairs(
list(c(3, 2), c(4, 3)),
list(c(1, 1), c(1, 4)),
type="MC"
)
compare_pairs(
list(c(0, 1), c(3, 2)),
list(c(2, 2), c(6, 1)),
type="GC"
)
compare_pairs(
list(c(0, 1), c(4, 1)),
list(c(3, 4), c(2, 4)),
type="PGC"
)
x <- all_ms_spikes
xlab <- "ms"
ylab <- "MC #"
main <- "MC Raster Plot"
xlim <- c(1800, ceiling(max(sapply(x, max))))
nbTrains <- length(x)
acquisitionDuration <- max(xlim)
plot(c(0, acquisitionDuration), c(0, nbTrains + 1), type = "n",
xlab = xlab, ylab = ylab, xlim = xlim, ylim = c(1, nbTrains + 1), bty = "n", main=main)
abline(v=2000, lty=3, col="red")
invisible(sapply(1:nbTrains,
function(idx) {
rect(x[[idx]] - 0.000001, idx - 0.3, x[[idx]] + 0.000001, idx+0.3)
}))
seq(0, 4)
seq(4)
plot_raster <- function(type) {
n <- c("MC" = 5, "GC" = 10, "PGC" = 5)[type]
prefix <- ("MC" = "Ms", "GC" = "Gs", "PGC" = "Ps")[type]
plot_raster <- function(type) {
n <- c("MC" = 5, "GC" = 10, "PGC" = 5)[type]
prefix <- c("MC" = "Ms", "GC" = "Gs", "PGC" = "Ps")[type]
combs <-expand.grid(j=seq(0, n-1), i=seq(0, n-1))
spike_files <- sprintf("%s_%d_%d", prefix, combs$i, combs$j)
spike_times <- lapply(spike_files, function(fname) read.table(fname)$V1)
return(spike_times)
}
plot_raster("MC")
plot_raster <- function(type) {
n <- c("MC" = 5, "GC" = 10, "PGC" = 5)[type]
prefix <- c("MC" = "Ms", "GC" = "Gs", "PGC" = "Ps")[type]
combs <-expand.grid(j=seq(0, n-1), i=seq(0, n-1))
spike_files <- sprintf("%s_%d_%d", prefix, combs$i, combs$j)
spike_times <- lapply(spike_files, function(fname) read.table(fname)$V1)
return(spike_times)
}
plot_raster <- function(type) {
n <- c("MC" = 5, "GC" = 10, "PGC" = 5)[type]
prefix <- c("MC" = "Ms", "GC" = "Gs", "PGC" = "Ps")[type]
combs <-expand.grid(j=seq(0, n-1), i=seq(0, n-1))
spike_files <- sprintf("%s_%d_%d", prefix, combs$i, combs$j)
spike_times <- lapply(spike_files, function(fname) read.table(fname)$V1)
x <- spike_times
xlab <- "ms"
ylab <- sprintf("%s #", type)
main <- sprintf("%s Raster Plot", type)
xlim <- c(1800, ceiling(max(sapply(x, max))))
nbTrains <- length(x)
acquisitionDuration <- max(xlim)
plot(c(0, acquisitionDuration), c(0, nbTrains + 1), type = "n",
xlab = xlab, ylab = ylab, xlim = xlim, ylim = c(1, nbTrains + 1), bty = "n", main=main)
abline(v=2000, lty=3, col="red")
invisible(sapply(1:nbTrains,
function(idx) {
rect(x[[idx]] - 0.000001, idx - 0.3, x[[idx]] + 0.000001, idx+0.3)
}))
}
plot_raster("MC")
plot_raster("GC")
plot_raster <- function(type) {
n <- c("MC" = 5, "GC" = 10, "PGC" = 5)[type]
prefix <- c("MC" = "Ms", "GC" = "Gs", "PGC" = "Ps")[type]
combs <-expand.grid(j=seq(0, n-1), i=seq(0, n-1))
spike_files <- sprintf("%s_%d_%d", prefix, combs$i, combs$j)
spike_times <- lapply(spike_files,
function(fname) {
tryCatch(
read.table(fname)$V1,
error=numeric(0))}
)
x <- spike_times
xlab <- "ms"
ylab <- sprintf("%s #", type)
main <- sprintf("%s Raster Plot", type)
xlim <- c(1800, ceiling(max(sapply(x, max))))
nbTrains <- length(x)
acquisitionDuration <- max(xlim)
plot(c(0, acquisitionDuration), c(0, nbTrains + 1), type = "n",
xlab = xlab, ylab = ylab, xlim = xlim, ylim = c(1, nbTrains + 1), bty = "n", main=main)
abline(v=2000, lty=3, col="red")
invisible(sapply(1:nbTrains,
function(idx) {
rect(x[[idx]] - 0.000001, idx - 0.3, x[[idx]] + 0.000001, idx+0.3)
}))
}
plot_raster("MC")
plot_raster("GC")
plot_raster("MC")
plot_raster <- function(type) {
n <- c("MC" = 5, "GC" = 10, "PGC" = 5)[type]
prefix <- c("MC" = "Ms", "GC" = "Gs", "PGC" = "Ps")[type]
combs <-expand.grid(j=seq(0, n-1), i=seq(0, n-1))
spike_files <- sprintf("%s_%d_%d", prefix, combs$i, combs$j)
spike_times <- lapply(spike_files,
function(fname) {
tryCatch(
read.table(fname)$V1,
error=numeric(0))}
)
return(spike_times)
x <- spike_times
xlab <- "ms"
ylab <- sprintf("%s #", type)
main <- sprintf("%s Raster Plot", type)
xlim <- c(1800, ceiling(max(sapply(x, max))))
nbTrains <- length(x)
acquisitionDuration <- max(xlim)
plot(c(0, acquisitionDuration), c(0, nbTrains + 1), type = "n",
xlab = xlab, ylab = ylab, xlim = xlim, ylim = c(1, nbTrains + 1), bty = "n", main=main)
abline(v=2000, lty=3, col="red")
invisible(sapply(1:nbTrains,
function(idx) {
rect(x[[idx]] - 0.000001, idx - 0.3, x[[idx]] + 0.000001, idx+0.3)
}))
}
plot_raster("MC")
plot_raster("GC")
numeric(0)
numeric()
e
plot_raster <- function(type) {
n <- c("MC" = 5, "GC" = 10, "PGC" = 5)[type]
prefix <- c("MC" = "Ms", "GC" = "Gs", "PGC" = "Ps")[type]
combs <-expand.grid(j=seq(0, n-1), i=seq(0, n-1))
spike_files <- sprintf("%s_%d_%d", prefix, combs$i, combs$j)
spike_times <- lapply(spike_files,
function(fname) {
tryCatch(
read.table(fname)$V1,
error=numeric}
plot_raster <- function(type) {
n <- c("MC" = 5, "GC" = 10, "PGC" = 5)[type]
prefix <- c("MC" = "Ms", "GC" = "Gs", "PGC" = "Ps")[type]
combs <-expand.grid(j=seq(0, n-1), i=seq(0, n-1))
spike_files <- sprintf("%s_%d_%d", prefix, combs$i, combs$j)
spike_times <- lapply(spike_files,
function(fname) {
tryCatch(
read.table(fname)$V1,
error=numeric)}
)
return(spike_times)
x <- spike_times
xlab <- "ms"
ylab <- sprintf("%s #", type)
main <- sprintf("%s Raster Plot", type)
xlim <- c(1800, ceiling(max(sapply(x, max))))
nbTrains <- length(x)
acquisitionDuration <- max(xlim)
plot(c(0, acquisitionDuration), c(0, nbTrains + 1), type = "n",
xlab = xlab, ylab = ylab, xlim = xlim, ylim = c(1, nbTrains + 1), bty = "n", main=main)
abline(v=2000, lty=3, col="red")
invisible(sapply(1:nbTrains,
function(idx) {
rect(x[[idx]] - 0.000001, idx - 0.3, x[[idx]] + 0.000001, idx+0.3)
}))
}
plot_raster("MC")
plot_raster("GC")
?tryCatch
plot_raster <- function(type) {
n <- c("MC" = 5, "GC" = 10, "PGC" = 5)[type]
prefix <- c("MC" = "Ms", "GC" = "Gs", "PGC" = "Ps")[type]
combs <-expand.grid(j=seq(0, n-1), i=seq(0, n-1))
spike_files <- sprintf("%s_%d_%d", prefix, combs$i, combs$j)
spike_times <- lapply(spike_files,
function(fname) {
tryCatch(
read.table(fname)$V1,
error=function(e) numeric(0))}
)
return(spike_times)
x <- spike_times
xlab <- "ms"
ylab <- sprintf("%s #", type)
main <- sprintf("%s Raster Plot", type)
xlim <- c(1800, ceiling(max(sapply(x, max))))
nbTrains <- length(x)
acquisitionDuration <- max(xlim)
plot(c(0, acquisitionDuration), c(0, nbTrains + 1), type = "n",
xlab = xlab, ylab = ylab, xlim = xlim, ylim = c(1, nbTrains + 1), bty = "n", main=main)
abline(v=2000, lty=3, col="red")
invisible(sapply(1:nbTrains,
function(idx) {
rect(x[[idx]] - 0.000001, idx - 0.3, x[[idx]] + 0.000001, idx+0.3)
}))
}
plot_raster("GC")
plot_raster <- function(type) {
n <- c("MC" = 5, "GC" = 10, "PGC" = 5)[type]
prefix <- c("MC" = "Ms", "GC" = "Gs", "PGC" = "Ps")[type]
combs <-expand.grid(j=seq(0, n-1), i=seq(0, n-1))
spike_files <- sprintf("%s_%d_%d", prefix, combs$i, combs$j)
spike_times <- lapply(spike_files,
function(fname) {
tryCatch(
read.table(fname)$V1,
error=function(e) numeric(0))}
)
x <- spike_times
xlab <- "ms"
ylab <- sprintf("%s #", type)
main <- sprintf("%s Raster Plot", type)
xlim <- c(1800, ceiling(max(sapply(x, max))))
nbTrains <- length(x)
acquisitionDuration <- max(xlim)
plot(c(0, acquisitionDuration), c(0, nbTrains + 1), type = "n",
xlab = xlab, ylab = ylab, xlim = xlim, ylim = c(1, nbTrains + 1), bty = "n", main=main)
abline(v=2000, lty=3, col="red")
invisible(sapply(1:nbTrains,
function(idx) {
rect(x[[idx]] - 0.000001, idx - 0.3, x[[idx]] + 0.000001, idx+0.3)
}))
}
plot_raster("MC")
plot_raster("GC")
is.null(numeric())
plot_raster <- function(type) {
n <- c("MC" = 5, "GC" = 10, "PGC" = 5)[type]
prefix <- c("MC" = "Ms", "GC" = "Gs", "PGC" = "Ps")[type]
combs <-expand.grid(j=seq(0, n-1), i=seq(0, n-1))
spike_files <- sprintf("%s_%d_%d", prefix, combs$i, combs$j)
spike_times <- lapply(spike_files,
function(fname) {
tryCatch(
read.table(fname)$V1,
error=function(e) numeric(0))}
)
x <- spike_times
xlab <- "ms"
ylab <- sprintf("%s #", type)
main <- sprintf("%s Raster Plot", type)
xlim <- c(1800, ceiling(max(sapply(x, max))))
nbTrains <- length(x)
acquisitionDuration <- max(xlim)
plot(c(0, acquisitionDuration), c(0, nbTrains + 1), type = "n",
xlab = xlab, ylab = ylab, xlim = xlim, ylim = c(1, nbTrains + 1), bty = "n", main=main)
abline(v=2000, lty=3, col="red")
invisible(sapply(1:nbTrains,
function(idx) {
if (length(x[[idx]]) > 0)
rect(x[[idx]] - 0.000001, idx - 0.3, x[[idx]] + 0.000001, idx+0.3)
}))
}
plot_raster("MC")
plot_raster("GC")
plot_raster <- function(type) {
n <- c("MC" = 5, "GC" = 10, "PGC" = 5)[type]
prefix <- c("MC" = "Ms", "GC" = "Gs", "PGC" = "Ps")[type]
combs <-expand.grid(j=seq(0, n-1), i=seq(0, n-1))
spike_files <- sprintf("%s_%d_%d", prefix, combs$i, combs$j)
spike_times <- lapply(spike_files,
function(fname) {
tryCatch(
read.table(fname)$V1,
error=function(e) numeric(0))}
)
x <- spike_times
xlab <- "ms"
ylab <- sprintf("%s #", type)
main <- sprintf("%s Raster Plot", type)
xlim <- c(1800, 3000)
nbTrains <- length(x)
acquisitionDuration <- max(xlim)
plot(c(0, acquisitionDuration), c(0, nbTrains + 1), type = "n",
xlab = xlab, ylab = ylab, xlim = xlim, ylim = c(1, nbTrains + 1), bty = "n", main=main)
abline(v=2000, lty=3, col="red")
invisible(sapply(1:nbTrains,
function(idx) {
if (length(x[[idx]]) > 0)
rect(x[[idx]] - 0.000001, idx - 0.3, x[[idx]] + 0.000001, idx+0.3)
}))
}
plot_raster("MC")
plot_raster("GC")
plot_raster("PGC")
plot_raster <- function(type) {
n <- c("MC" = 5, "GC" = 10, "PGC" = 5)[type]
prefix <- c("MC" = "Ms", "GC" = "Gs", "PGC" = "Ps")[type]
combs <-expand.grid(j=seq(0, n-1), i=seq(0, n-1))
spike_files <- sprintf("%s_%d_%d", prefix, combs$i, combs$j)
spike_times <- lapply(spike_files,
function(fname) {
tryCatch(
read.table(fname)$V1,
error=function(e) numeric(0))}
)
x <- spike_times
xlab <- "ms"
ylab <- sprintf("%s #", type)
main <- sprintf("%s Raster Plot", type)
xlim <- c(1800, 3000)
nbTrains <- length(x)
acquisitionDuration <- max(xlim)
plot(c(0, acquisitionDuration), c(0, nbTrains + 1), type = "n",
xlab = xlab, ylab = ylab, xlim = xlim, ylim = c(1, nbTrains + 1), bty = "n", main=main)
abline(v=2000, lty=3, col="red")
invisible(sapply(1:nbTrains,
function(idx) {
if (length(x[[idx]]) > 0)
rect(x[[idx]] - 0.000001, idx - 0.3, x[[idx]] + 0.000001, idx+0.3)
}))
}
Vam <- read.table("Vam")$V1
plot(tt, Vam)
Vam <- read.table("Vam")$V1
plot(tt, Vam, type='line', xlim=c(2000, 3000))
pbinom(1, 5, 1/3)
pbinom(1, 2, 0.5)
pbinom(2, 2, 0.5)
pbinom(0, 2, 0.5)
pbinom(0, 1, 0.5)
pbinom(1, 1, 0.5)
pbinom(2, 2, 0.5)
?pbinom
dbinom(2, 2, 0.5)
dbinom(1, 5, 1/3
)
?dgeom
sum(c(-1, 2, 5) * c(1/6, 2/6, 3/6))
c(-1, 2) - c(-2, 3)
0.5^4
1 * 0.25 + 1 * 0.25 + 16 * 0.25
7 - 18 * 2 + 9
var(c(0, 1, 2))
sum((c(0, 1, 2) - mean(c(0, 1, 2)))^2) / 3
sum((c(0, 1, 2) - mean(c(0, 1, 2)))^2) / 2
sum((c(0, 1, 2) - mean(c(0, 1, 2)))^2) / 3
mean(c(0, 1, 2))
sum((c(0, 2) - mean(c(0, 2)))^2) / 2
a / ((1-r)*(1-a))
a <- 0.5
r <- 0.5
a / ((1-r)*(1-a))
a <- 1/3
a <- 1
r <- 2/3
a / ((1-r)*(1-a))
a / ((1-r)*(1-a))
a / ((1-r)*(1-a))
a <- 2/3
1 / (1/3)
expand.grid(v=c(0, 1), w=c(0,1,2))
x <- expand.grid(v=c(0, 1), w=c(0,1,2))
x$v + x$w
sum(x$v + x$w)
sum((1/9) * (1 + c(0, 1, 2)))
comb(6, 3)
choose(6, 3)
choose(6, 3)
choose(7, 4)
20 / 35
6 * p^5 * (1-p)
choose(5, 3)
6 * p^5 * (1-p) * 10 * p^3 * (1-p)^2
60 * p^8 * (1-p)^3
choose(11, 7)
(1- 6 * p^5 * (1-p)) + (1 - 10 * p^3 * (1-p)^2)
choose(9, 6)
choose(9, 8)
choose(9, 6)
choose(5, 4)
choose(4, 2)
choose(5, 5) * choose(4, 3)
X_grid <- expand.grid(x1=c(1, 2, 3), x2=c(1, 2, 3))
X_grid$x1 - X_grid$x2
space <- X_grid$x1 - X_grid$x2
space
table(space)
table(space) / length(space)
length(space)
names(table(space))
as.numeric(names(table(space))) * table(space) / length(space)
sum(as.numeric(names(table(space))) * table(space) / length(space))
space^2
sum((space^2)/9)
space^2
talbe(space^2)
table(space^2)
table(space^2) / 9
xy <- expand.grid(x=c(1,2,4), y=c(1, 3))
xy
(xy$x + xy$y)^2
sum((xy$x + xy$y)^2)
1/sum((xy$x + xy$y)^2)
xy$prob <- (1/128) * (xy$x + xy*y)^2
xy$prob <- (1/128) * (xy$x + xy$y)^2
xy
sum(xy$prob)
xy[xy$y < xy$x]
xy$y < xy$x
xy[xy$y < xy$x,]
sum(xy[xy$y < xy$x, "prob"])
sum(xy[xy$y == xy$x, "prob"])
sum(xy[xy$x == 1, "prob"])
sum(xy[xy$x == 2, "prob"])
sum(xy[xy$x == 3, "prob"])
sum(xy[xy$x == 4, "prob"])
74/128
34/128
20/128
sum(xy$x * xy$prob)
sum(xy$x * xy$y * xy$prob)
sum((xy$x - mean(xy$x))^2 * xy$prob)
sum((xy$x - sum(xy$x*xy$prob))^2 * xy$prob)
c(4, 3, 2, 2, 2, 1, 8, 2, 4)
sum(c(4, 3, 2, 2, 2, 1, 8, 2, 4))
sum(c(8, 2, 4) / 28)
c(4, 1, 0, 1) * c(2, 0, 1, 4) / 28
sum(c(4, 1, 0, 1) * c(2, 0, 1, 4) / 28)
c(4, 2, 8)
sum(c(4, 2, 8))
sum(2, 4)
sum(c(2, 4))
c(2, 0, 1) / 28
p <- c(2, 0, 1) / 28
ym <- sum(c(1, 0, -1) * p)
ym
p <- c(2, 0, 1) / 3
ym <- sum(c(1, 0, -1) * p)
ym
(c(1, 0, -1) - ym)^2 * p
sum((c(1, 0, -1) - ym)^2 * p)
c(4, 2, 8) / 28
sum(c(4, 2, 8) / 28) * sum(c(4, 2) / 28)
4 / 28
sum(c(4, 2, 2, 1, 8, 4))
sum(c(4, 2, 8) / 21) * sum(c(4, 2) / 21)
4/21
sum(c(2, 1, 4))
1/7
c(4, 1, 0, 1) * c(2, 0, 1, 4) / 7
sum(c(4, 1, 0, 1) * c(2, 0, 1, 4) / 7)
sum(-1 * c(4, 1, 0, 1) * c(2, 0, 1, 4) / 7)
for (i in 1:10) {}
for (i in 1:10) {
for (j in 1:10) {
}
}
stuff <- c()
for (i in 1:10) {}
for (i in 1:10) {
for (j in 1:10) {
if (i == j) stuff <- c(stuff, 0.75 * 0.25)
else if (i + 1 == j) stuff <- c(stuff, 0)
else <- c(stuff, 0.75^2 * 0.25^2)
for (i in 1:10) {
for (j in 1:10) {
if (i == j) stuff <- c(stuff, 0.75 * 0.25)
else if (i + 1 == j) stuff <- c(stuff, 0)
else stuff <- c(stuff, 0.75^2 * 0.25^2)
}
}
stuff
(I_k - E[I_k]) * (I_l - E[I_l])
E[I_k I_l - I_l E[I_k] - I_k E[I_l] + E[I_k] E[I_l]]
2*E[I_k I_l] - I_l E[I_k] - I_k E[I_l] + E[I_k] E[I_l]]
sum(stuff)
sum(stuff) - (0.75 * 0.25)^2
sum(stuff) - (10 * 0.75 * 0.25)^2
for (i in 1:10) {
for (j in 1:10) {
if (i == j) stuff <- c(stuff, 0.75 * 0.25)
else if (i + 1 == j) stuff <- c(stuff, 0)
else stuff <- c(stuff, 0.75^2 * 0.25^2)
}
}
stuff <- c()
for (i in 1:10) {
for (j in 1:10) {
if (i == j) stuff <- c(stuff, 0.75 * 0.25)
else if (i - j == 1) stuff <- c(stuff, 0)
else stuff <- c(stuff, 0.75^2 * 0.25^2)
}
}
sum(stuff) - (10 * 0.75 * 0.25)^2
for (i in 1:10) {
for (j in 1:10) {
if (i == j) stuff <- c(stuff, 0.75 * 0.25)
else if (abs(i - j) == 1) stuff <- c(stuff, 0)
else stuff <- c(stuff, 0.75^2 * 0.25^2)
}
}
sum(stuff) - (10 * 0.75 * 0.25)^2
